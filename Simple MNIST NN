{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fa066939",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T15:23:20.048139Z",
     "iopub.status.busy": "2024-04-15T15:23:20.047758Z",
     "iopub.status.idle": "2024-04-15T15:23:25.308859Z",
     "shell.execute_reply": "2024-04-15T15:23:25.307870Z"
    },
    "papermill": {
     "duration": 5.270219,
     "end_time": "2024-04-15T15:23:25.311383",
     "exception": false,
     "start_time": "2024-04-15T15:23:20.041164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "data = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "06b219b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T15:23:25.323177Z",
     "iopub.status.busy": "2024-04-15T15:23:25.322485Z",
     "iopub.status.idle": "2024-04-15T15:23:26.120339Z",
     "shell.execute_reply": "2024-04-15T15:23:26.117541Z"
    },
    "papermill": {
     "duration": 0.807326,
     "end_time": "2024-04-15T15:23:26.124259",
     "exception": false,
     "start_time": "2024-04-15T15:23:25.316933",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = np.array(data)\n",
    "m, n = data.shape\n",
    "np.random.shuffle(data) # shuffle before splitting into dev and training sets\n",
    "\n",
    "data_dev = data[0:1000].T\n",
    "Y_dev = data_dev[0]\n",
    "X_dev = data_dev[1:n]\n",
    "X_dev = X_dev / 255.\n",
    "\n",
    "data_train = data[1000:m].T\n",
    "Y_train = data_train[0]\n",
    "X_train = data_train[1:n]\n",
    "X_train = X_train / 255.\n",
    "_,m_train = X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "453cf469",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T15:23:26.139845Z",
     "iopub.status.busy": "2024-04-15T15:23:26.139347Z",
     "iopub.status.idle": "2024-04-15T15:23:26.150051Z",
     "shell.execute_reply": "2024-04-15T15:23:26.148985Z"
    },
    "papermill": {
     "duration": 0.020331,
     "end_time": "2024-04-15T15:23:26.152738",
     "exception": false,
     "start_time": "2024-04-15T15:23:26.132407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9, 1, 1, ..., 7, 4, 5])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "67c00a37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T15:23:26.166126Z",
     "iopub.status.busy": "2024-04-15T15:23:26.165326Z",
     "iopub.status.idle": "2024-04-15T15:23:26.187047Z",
     "shell.execute_reply": "2024-04-15T15:23:26.185950Z"
    },
    "papermill": {
     "duration": 0.031679,
     "end_time": "2024-04-15T15:23:26.189871",
     "exception": false,
     "start_time": "2024-04-15T15:23:26.158192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def init_params():\n",
    "#     W1 = np.random.rand(10,784)\n",
    "#     b1 = np.random.rand(10, 1)\n",
    "    \n",
    "#     W2 = np.random.rand(10,10)\n",
    "#     b2 = np.random.rand(10, 1)\n",
    "    \n",
    "#     return W1, b1, W2, b2\n",
    "    \n",
    "# def ReLU(Z):\n",
    "#     return np.maximum(0,Z)\n",
    "\n",
    "# def softmax(Z):\n",
    "#     return (np.exp(Z) / np.sum(np.exp(Z)))\n",
    "\n",
    "    \n",
    "# # def forward_prop(W1, b1, W2, b2, X):\n",
    "# #     Z1 = W1.dot(X) + b1\n",
    "# #     A1 = ReLU(Z1)\n",
    "# #     Z2 = W2.dot(A1) + b2\n",
    "# #     A2 = softmax(A1)\n",
    "# def forward_prop(W1, b1, W2, b2, X):\n",
    "#     Z1 = W1.dot(X) + b1\n",
    "#     A1 = ReLU(Z1)\n",
    "#     Z2 = W2.dot(A1) + b2\n",
    "#     A2 = softmax(A1)\n",
    "#     return Z1, A1, Z2, A2\n",
    "    \n",
    "# def one_hot(Y):\n",
    "#     one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n",
    "#     one_hot_Y[np.arange(Y.size), Y] = 1 \n",
    "#     one_hot_Y = one_hot_Y.T\n",
    "#     return one_hot_Y\n",
    "\n",
    "# def deriv_ReLU(Z):\n",
    "#     return Z > 0\n",
    "    \n",
    "# def back_prop(Z1, A1, Z2, A2, W2,X , Y):\n",
    "#     m = Y.size\n",
    "    \n",
    "#     one_hot_Y = one_hot(Y)\n",
    "    \n",
    "#     dZ2 = A2 - one_hot_Y\n",
    "#     dW2 = 1/ m * dZ2.dot(A1.T)\n",
    "#     db2 = 1/ m * np.sum(dZ2, 2)\n",
    "    \n",
    "#     dZ1 = W2.T.dot(dZ2) * deriv_ReLU(Z1)\n",
    "#     dW1 = 1/ m * dZ1.dot(X.T)\n",
    "#     db1 = 1/ m * np.sum(dZ1, 2)\n",
    "    \n",
    "#     return dW1, db1, dW2, db2\n",
    "\n",
    "# def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n",
    "#     W1= W1 - alpha * dW1\n",
    "#     b1 = b1 - alpha * db1\n",
    "#     W2 = W2 - alpha * dW2\n",
    "#     b2 = b2 - alpha * db2\n",
    "    \n",
    "#     return W1, b1, W2, b2\n",
    "\n",
    "def init_params():\n",
    "    W1 = np.random.rand(10, 784) - 0.5\n",
    "    b1 = np.random.rand(10, 1) - 0.5\n",
    "    W2 = np.random.rand(10, 10) - 0.5\n",
    "    b2 = np.random.rand(10, 1) - 0.5\n",
    "    return W1, b1, W2, b2\n",
    "\n",
    "def ReLU(Z):\n",
    "    return np.maximum(Z, 0)\n",
    "\n",
    "def softmax(Z):\n",
    "    A = np.exp(Z) / sum(np.exp(Z))\n",
    "    return A\n",
    "    \n",
    "def forward_prop(W1, b1, W2, b2, X):\n",
    "    Z1 = W1.dot(X) + b1\n",
    "    A1 = ReLU(Z1)\n",
    "    Z2 = W2.dot(A1) + b2\n",
    "    A2 = softmax(Z2)\n",
    "    return Z1, A1, Z2, A2\n",
    "\n",
    "def ReLU_deriv(Z):\n",
    "    return Z > 0\n",
    "\n",
    "def one_hot(Y):\n",
    "    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n",
    "    one_hot_Y[np.arange(Y.size), Y] = 1\n",
    "    one_hot_Y = one_hot_Y.T\n",
    "    return one_hot_Y\n",
    "\n",
    "def backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n",
    "    one_hot_Y = one_hot(Y)\n",
    "    dZ2 = A2 - one_hot_Y\n",
    "    dW2 = 1 / m * dZ2.dot(A1.T)\n",
    "    db2 = 1 / m * np.sum(dZ2)\n",
    "    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n",
    "    dW1 = 1 / m * dZ1.dot(X.T)\n",
    "    db1 = 1 / m * np.sum(dZ1)\n",
    "    return dW1, db1, dW2, db2\n",
    "\n",
    "def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n",
    "    W1 = W1 - alpha * dW1\n",
    "    b1 = b1 - alpha * db1    \n",
    "    W2 = W2 - alpha * dW2  \n",
    "    b2 = b2 - alpha * db2    \n",
    "    return W1, b1, W2, b2\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "adec29b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T15:23:26.199904Z",
     "iopub.status.busy": "2024-04-15T15:23:26.199529Z",
     "iopub.status.idle": "2024-04-15T15:23:26.211039Z",
     "shell.execute_reply": "2024-04-15T15:23:26.210056Z"
    },
    "papermill": {
     "duration": 0.018951,
     "end_time": "2024-04-15T15:23:26.213297",
     "exception": false,
     "start_time": "2024-04-15T15:23:26.194346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def get_predictions(A2):\n",
    "#     return np.argmax(A2, 0)\n",
    "\n",
    "# def get_accuracy(predictions, Y):\n",
    "#     print(predictions, Y)\n",
    "#     return np.sum(predictions == Y) / Y.size\n",
    "\n",
    "# # def gradient_descent(X, Y, iterations, alpha):\n",
    "# #     W1, b1, W2, b2 = init_params()\n",
    "# #     for i in range(iterations):\n",
    "# #         Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "# #         dW1, db1, dW2, db2 = back_prop(Z1, A1, Z2, A2, W2, X, Y)\n",
    "# #         W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n",
    "# #         if i% 10 == 0:\n",
    "# #             print(\"Iteration: \",i)\n",
    "# #             print(\"Accuracy: \",get_accuracy(get_predictions(A2), Y))\n",
    "# #     return W1, b1, W2, b2\n",
    "# def gradient_descent(X, Y, iterations, alpha):\n",
    "#     W1, b1, W2, b2 = init_params()\n",
    "#     for i in range(iterations):\n",
    "#         Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "#         dW1, db1, dW2, db2 = back_prop(Z1, A1, Z2, A2, W2, X, Y)\n",
    "#         W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n",
    "#         if i% 10 == 0:\n",
    "#             print(\"Iteration: \",i)\n",
    "#             print(\"Accuracy: \",get_accuracy(get_predictions(A2), Y))\n",
    "#     return W1, b1, W2, b2\n",
    "\n",
    "def get_predictions(A2):\n",
    "    return np.argmax(A2, 0)\n",
    "\n",
    "def get_accuracy(predictions, Y):\n",
    "    print(predictions, Y)\n",
    "    return np.sum(predictions == Y) / Y.size\n",
    "\n",
    "def gradient_descent(X, Y, alpha, iterations):\n",
    "    W1, b1, W2, b2 = init_params()\n",
    "    for i in range(iterations):\n",
    "        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n",
    "        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n",
    "        if i % 10 == 0:\n",
    "            print(\"Iteration: \", i)\n",
    "            predictions = get_predictions(A2)\n",
    "            print(get_accuracy(predictions, Y))\n",
    "    return W1, b1, W2, b2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ba9e937a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T15:23:26.223654Z",
     "iopub.status.busy": "2024-04-15T15:23:26.223306Z",
     "iopub.status.idle": "2024-04-15T15:24:23.692685Z",
     "shell.execute_reply": "2024-04-15T15:24:23.691075Z"
    },
    "papermill": {
     "duration": 57.479174,
     "end_time": "2024-04-15T15:24:23.696865",
     "exception": false,
     "start_time": "2024-04-15T15:23:26.217691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:  0\n",
      "[8 8 0 ... 0 7 0] [9 1 1 ... 7 4 5]\n",
      "0.050219512195121954\n",
      "Iteration:  10\n",
      "[6 8 1 ... 0 6 0] [9 1 1 ... 7 4 5]\n",
      "0.18095121951219512\n",
      "Iteration:  20\n",
      "[6 8 1 ... 9 6 0] [9 1 1 ... 7 4 5]\n",
      "0.24904878048780488\n",
      "Iteration:  30\n",
      "[3 8 1 ... 9 6 0] [9 1 1 ... 7 4 5]\n",
      "0.29341463414634145\n",
      "Iteration:  40\n",
      "[3 1 1 ... 7 6 3] [9 1 1 ... 7 4 5]\n",
      "0.35348780487804876\n",
      "Iteration:  50\n",
      "[3 1 1 ... 7 6 3] [9 1 1 ... 7 4 5]\n",
      "0.3955365853658537\n",
      "Iteration:  60\n",
      "[3 1 1 ... 7 6 3] [9 1 1 ... 7 4 5]\n",
      "0.42790243902439024\n",
      "Iteration:  70\n",
      "[3 1 1 ... 7 6 3] [9 1 1 ... 7 4 5]\n",
      "0.458609756097561\n",
      "Iteration:  80\n",
      "[3 1 1 ... 7 6 3] [9 1 1 ... 7 4 5]\n",
      "0.4820243902439024\n",
      "Iteration:  90\n",
      "[3 1 1 ... 7 6 3] [9 1 1 ... 7 4 5]\n",
      "0.5049512195121951\n",
      "Iteration:  100\n",
      "[3 1 1 ... 7 6 3] [9 1 1 ... 7 4 5]\n",
      "0.5279756097560976\n",
      "Iteration:  110\n",
      "[7 1 1 ... 7 6 3] [9 1 1 ... 7 4 5]\n",
      "0.5484634146341464\n",
      "Iteration:  120\n",
      "[9 1 1 ... 7 6 3] [9 1 1 ... 7 4 5]\n",
      "0.5662439024390243\n",
      "Iteration:  130\n",
      "[9 1 1 ... 7 6 3] [9 1 1 ... 7 4 5]\n",
      "0.5830975609756097\n",
      "Iteration:  140\n",
      "[9 1 1 ... 7 6 3] [9 1 1 ... 7 4 5]\n",
      "0.5985121951219512\n",
      "Iteration:  150\n",
      "[9 1 1 ... 7 6 5] [9 1 1 ... 7 4 5]\n",
      "0.6138048780487805\n",
      "Iteration:  160\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.6358292682926829\n",
      "Iteration:  170\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.664829268292683\n",
      "Iteration:  180\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.6916341463414634\n",
      "Iteration:  190\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.713170731707317\n",
      "Iteration:  200\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.7300975609756097\n",
      "Iteration:  210\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.7434634146341463\n",
      "Iteration:  220\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.7553658536585366\n",
      "Iteration:  230\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.7640975609756098\n",
      "Iteration:  240\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.7726585365853659\n",
      "Iteration:  250\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.7795609756097561\n",
      "Iteration:  260\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.7850975609756098\n",
      "Iteration:  270\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.7900731707317074\n",
      "Iteration:  280\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.7945365853658537\n",
      "Iteration:  290\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.7990243902439025\n",
      "Iteration:  300\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.802829268292683\n",
      "Iteration:  310\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.806439024390244\n",
      "Iteration:  320\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8095365853658537\n",
      "Iteration:  330\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8123902439024391\n",
      "Iteration:  340\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8150243902439024\n",
      "Iteration:  350\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8176341463414634\n",
      "Iteration:  360\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8204634146341463\n",
      "Iteration:  370\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.823170731707317\n",
      "Iteration:  380\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8261463414634146\n",
      "Iteration:  390\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8284634146341463\n",
      "Iteration:  400\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8306829268292683\n",
      "Iteration:  410\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8325365853658536\n",
      "Iteration:  420\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8345121951219512\n",
      "Iteration:  430\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8362439024390244\n",
      "Iteration:  440\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8378048780487805\n",
      "Iteration:  450\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8392926829268292\n",
      "Iteration:  460\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8404878048780487\n",
      "Iteration:  470\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8418780487804878\n",
      "Iteration:  480\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8431951219512195\n",
      "Iteration:  490\n",
      "[9 1 1 ... 7 4 5] [9 1 1 ... 7 4 5]\n",
      "0.8441219512195122\n"
     ]
    }
   ],
   "source": [
    "W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.1, 500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4ea742df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T15:24:23.736830Z",
     "iopub.status.busy": "2024-04-15T15:24:23.736183Z",
     "iopub.status.idle": "2024-04-15T15:24:23.750611Z",
     "shell.execute_reply": "2024-04-15T15:24:23.749145Z"
    },
    "papermill": {
     "duration": 0.038646,
     "end_time": "2024-04-15T15:24:23.754466",
     "exception": false,
     "start_time": "2024-04-15T15:24:23.715820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def make_predictions(X, W1, b1, W2, b2):\n",
    "    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "    predictions = get_predictions(A2)\n",
    "    return predictions\n",
    "\n",
    "def test_prediction(index, W1, b1, W2, b2):\n",
    "    current_image = X_train[:, index, None]\n",
    "    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n",
    "    label = Y_train[index]\n",
    "    print(\"Prediction: \", prediction)\n",
    "    print(\"Label: \", label)\n",
    "    \n",
    "    current_image = current_image.reshape((28, 28)) * 255\n",
    "    plt.gray()\n",
    "    plt.imshow(current_image, interpolation='nearest')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "aa4d5db0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T15:24:23.794037Z",
     "iopub.status.busy": "2024-04-15T15:24:23.793419Z",
     "iopub.status.idle": "2024-04-15T15:24:24.551564Z",
     "shell.execute_reply": "2024-04-15T15:24:24.550433Z"
    },
    "papermill": {
     "duration": 0.780918,
     "end_time": "2024-04-15T15:24:24.554308",
     "exception": false,
     "start_time": "2024-04-15T15:24:23.773390",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [9]\n",
      "Label:  9\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [1]\n",
      "Label:  1\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [1]\n",
      "Label:  1\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [2]\n",
      "Label:  8\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_prediction(0, W1, b1, W2, b2)\n",
    "test_prediction(1, W1, b1, W2, b2)\n",
    "test_prediction(2, W1, b1, W2, b2)\n",
    "test_prediction(3, W1, b1, W2, b2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "783f995c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T15:24:24.577320Z",
     "iopub.status.busy": "2024-04-15T15:24:24.576409Z",
     "iopub.status.idle": "2024-04-15T15:24:24.611120Z",
     "shell.execute_reply": "2024-04-15T15:24:24.609746Z"
    },
    "papermill": {
     "duration": 0.054219,
     "end_time": "2024-04-15T15:24:24.618780",
     "exception": false,
     "start_time": "2024-04-15T15:24:24.564561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[8 5 9 5 4 2 8 9 9 5 1 5 0 0 9 7 3 6 5 0 2 7 4 0 4 1 4 9 1 2 2 2 9 7 7 9 6\n",
      " 7 6 7 9 0 4 4 0 5 4 9 0 1 8 1 3 5 6 3 4 3 9 4 5 8 6 2 0 2 7 6 5 0 3 2 4 2\n",
      " 5 7 7 8 7 7 4 5 2 8 6 6 1 1 5 7 7 3 9 4 2 4 5 7 3 4 3 2 4 9 5 1 3 4 6 1 8\n",
      " 3 8 8 9 1 4 4 4 9 1 0 6 1 7 2 7 0 3 0 6 2 9 3 2 2 8 2 0 9 4 0 4 0 8 1 6 9\n",
      " 1 5 8 0 4 7 4 1 6 3 2 4 8 8 0 3 7 8 0 0 9 7 8 3 6 6 4 0 7 9 2 8 4 0 3 6 7\n",
      " 5 6 2 7 5 7 1 1 3 5 9 1 7 4 7 5 0 7 4 5 5 6 8 1 3 3 2 4 2 3 4 1 5 1 9 0 9\n",
      " 7 3 3 9 3 8 5 3 5 8 0 9 9 1 9 8 0 1 6 4 0 4 3 7 1 0 8 1 3 6 1 1 3 4 8 2 3\n",
      " 9 9 9 6 7 2 2 2 2 3 5 1 9 4 7 1 9 2 1 4 5 2 7 3 3 2 9 0 8 9 4 4 8 3 1 5 2\n",
      " 2 5 4 8 0 7 2 4 9 6 5 6 2 0 8 6 5 7 0 4 1 6 9 1 4 5 0 4 9 3 1 0 1 6 2 5 3\n",
      " 8 0 7 2 6 0 7 7 1 8 2 8 7 0 7 3 1 0 8 5 1 9 3 1 0 1 9 9 1 3 9 5 9 0 1 0 8\n",
      " 3 2 6 5 4 8 2 1 6 4 2 1 2 4 3 1 5 6 8 7 8 3 5 4 6 7 5 5 8 9 6 4 8 4 2 1 8\n",
      " 4 8 0 1 1 1 3 8 4 6 7 6 8 9 4 2 8 1 2 6 7 0 3 3 3 6 1 4 9 6 8 5 0 9 3 1 0\n",
      " 9 0 3 0 4 4 7 0 6 1 0 1 6 5 7 2 2 1 4 1 4 5 3 5 6 9 5 1 5 6 2 7 9 6 9 6 8\n",
      " 7 8 9 7 4 4 5 4 2 0 6 0 0 0 0 0 2 0 5 6 8 2 2 7 5 6 2 9 8 8 9 6 0 3 0 5 9\n",
      " 1 7 8 6 9 5 0 7 0 8 8 3 1 1 7 2 5 2 4 5 4 5 6 6 6 5 2 7 4 6 4 0 7 2 2 8 1\n",
      " 6 3 7 8 0 6 3 8 4 8 4 5 1 5 8 1 1 4 1 3 7 3 4 0 7 1 9 3 9 9 4 0 2 7 5 4 8\n",
      " 0 3 8 9 7 9 7 4 2 1 5 2 0 3 8 7 6 8 5 5 2 1 3 1 2 1 4 9 1 4 6 1 4 5 5 4 6\n",
      " 5 7 2 8 3 7 4 0 5 3 0 7 3 7 0 7 8 0 3 2 4 5 6 0 1 6 2 5 8 4 4 5 8 7 3 9 3\n",
      " 0 9 2 1 7 8 1 7 0 5 7 5 6 4 7 2 7 4 0 5 9 3 5 9 5 9 9 9 9 3 4 1 8 5 3 1 4\n",
      " 8 0 9 8 6 4 6 9 0 8 3 8 6 0 2 0 2 0 3 4 1 8 5 7 2 9 7 5 5 3 3 4 1 2 0 0 8\n",
      " 0 7 4 6 8 3 6 8 0 4 5 9 4 1 5 0 6 9 5 3 7 7 5 9 0 1 8 3 4 0 0 8 6 1 2 4 6\n",
      " 9 0 9 7 0 1 2 9 4 5 8 4 7 8 9 3 2 9 2 7 2 0 2 5 9 2 9 7 9 6 2 7 1 1 3 7 8\n",
      " 6 0 8 1 8 1 8 9 7 3 9 6 8 7 4 8 0 0 4 0 1 4 6 2 8 3 8 7 2 7 2 5 9 0 1 1 8\n",
      " 3 8 1 6 6 4 3 0 6 0 2 7 4 7 0 9 7 0 3 3 3 5 2 6 4 9 1 2 9 7 2 7 9 1 8 2 6\n",
      " 1 0 6 8 2 9 9 9 6 8 0 6 0 7 0 1 1 2 3 2 7 8 6 1 7 1 7 4 3 5 8 3 1 9 9 9 7\n",
      " 2 7 6 3 0 9 3 9 2 7 1 1 7 1 2 9 4 4 9 4 0 4 2 6 5 6 4 4 5 1 0 5 9 2 7 2 6\n",
      " 4 3 9 2 6 8 3 7 3 2 0 3 2 6 3 0 8 9 0 3 5 5 7 1 8 4 3 3 3 7 6 4 2 9 3 2 3\n",
      " 7] [8 5 4 5 9 2 8 7 9 5 1 5 0 0 9 7 3 6 5 0 2 9 4 0 4 1 9 9 1 2 2 2 9 7 7 9 6\n",
      " 7 6 7 9 0 4 4 0 5 4 7 0 1 8 1 3 5 6 3 4 3 4 4 5 8 6 8 0 2 7 6 5 0 5 2 4 2\n",
      " 5 7 7 5 7 7 4 5 2 4 6 6 1 1 5 7 7 3 7 4 2 4 7 7 3 4 5 2 4 9 5 1 3 4 6 1 3\n",
      " 3 8 8 4 2 4 4 4 9 1 0 6 1 7 2 7 0 2 0 6 2 8 3 2 2 8 3 6 4 4 0 4 0 2 1 6 9\n",
      " 1 5 8 0 4 7 4 8 6 3 8 9 8 8 7 3 7 2 0 0 7 7 5 3 6 2 4 0 7 9 2 8 4 0 3 6 9\n",
      " 8 6 8 7 5 7 1 1 5 5 9 1 7 4 7 5 0 7 4 5 0 6 8 1 3 3 2 4 8 3 8 1 5 1 9 0 9\n",
      " 7 3 3 7 3 5 5 3 5 8 0 9 9 7 9 8 0 1 2 4 0 4 3 7 4 6 8 1 3 6 1 1 2 2 8 2 3\n",
      " 9 9 9 6 7 2 2 2 2 3 5 1 9 4 7 1 4 2 1 4 5 2 7 3 3 2 9 0 8 9 9 4 8 3 1 5 2\n",
      " 2 5 4 8 0 7 2 9 9 6 5 6 2 0 8 5 3 7 0 4 1 5 4 1 4 5 0 4 7 3 1 0 1 6 2 9 3\n",
      " 8 0 7 2 6 0 7 7 1 8 2 8 7 0 7 3 1 0 8 5 1 7 2 1 0 1 9 9 8 3 3 5 9 0 9 0 9\n",
      " 3 3 6 5 4 8 2 1 6 4 2 1 2 4 3 1 5 6 0 7 8 3 0 4 6 7 5 5 8 9 6 4 8 4 2 1 9\n",
      " 4 8 0 1 1 1 3 8 4 6 7 6 8 9 4 8 8 8 6 6 7 8 3 3 3 6 1 4 7 6 8 5 0 9 5 1 0\n",
      " 9 0 3 0 4 4 7 0 6 1 0 1 6 5 7 2 2 1 4 1 4 5 5 5 6 9 5 1 5 6 8 7 7 6 9 6 8\n",
      " 9 8 7 7 4 4 5 9 2 0 6 0 0 4 0 0 2 0 8 6 8 2 2 7 5 6 2 9 8 6 9 5 0 8 0 5 9\n",
      " 8 7 8 6 9 5 0 7 5 6 8 3 7 1 7 3 0 2 4 5 4 8 6 6 6 5 2 9 4 5 4 5 7 2 2 8 1\n",
      " 6 3 7 9 0 6 3 8 9 1 4 5 1 5 8 1 1 4 1 3 7 3 4 0 7 8 9 3 9 9 4 5 2 7 5 4 6\n",
      " 0 3 8 9 7 9 7 4 2 7 5 2 4 3 8 7 5 8 5 5 2 1 8 1 2 1 4 9 1 4 6 1 4 5 5 4 6\n",
      " 5 7 2 8 3 9 4 0 5 3 0 7 3 7 0 7 8 0 3 2 4 5 6 0 1 6 2 1 1 9 4 5 8 7 3 9 3\n",
      " 0 9 5 1 7 8 1 7 0 5 7 3 6 4 1 2 7 4 0 5 9 3 3 4 8 9 7 4 9 3 4 1 5 5 2 1 4\n",
      " 8 0 7 8 6 4 6 9 0 8 5 8 6 0 2 5 2 0 3 4 1 8 5 7 2 9 7 5 5 3 3 4 1 2 0 0 8\n",
      " 0 9 4 6 8 3 6 8 5 4 5 4 4 1 0 0 6 4 5 3 7 7 5 9 0 1 8 3 4 5 0 2 6 1 2 4 6\n",
      " 9 5 9 3 0 1 2 9 4 5 8 4 7 8 8 3 2 9 6 7 2 0 4 8 9 2 9 7 7 6 2 7 2 1 3 9 8\n",
      " 6 0 8 1 8 1 8 9 7 3 9 6 8 7 8 8 0 0 4 0 1 4 6 2 1 3 3 7 2 7 2 5 9 0 1 1 8\n",
      " 3 8 1 6 6 4 3 0 6 0 2 7 4 7 0 4 7 0 3 3 3 5 2 6 4 9 1 2 9 7 2 7 7 1 8 2 6\n",
      " 1 0 2 8 7 9 9 9 6 8 0 6 0 7 0 1 1 3 3 2 9 8 6 1 7 1 7 5 3 5 5 3 1 9 9 9 7\n",
      " 2 7 6 3 0 9 3 9 2 7 1 1 7 1 2 9 4 4 9 4 0 4 2 6 5 6 9 4 5 1 5 5 9 2 7 1 6\n",
      " 4 3 9 2 6 8 3 2 3 2 0 3 2 6 3 0 8 5 0 3 5 5 7 1 4 4 3 8 3 8 5 4 2 9 3 3 3\n",
      " 7]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.844"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dev_predictions = make_predictions(X_dev, W1, b1, W2, b2)\n",
    "get_accuracy(dev_predictions, Y_dev)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 67.854742,
   "end_time": "2024-04-15T15:24:25.169116",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-15T15:23:17.314374",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
